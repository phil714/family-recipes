// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["fullTextSearch"]
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                  String           @id @default(nanoid())
  email               String           @unique
  name                String
  language            String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  familyMembers       FamilyMember[]
}

model UserCredential {
  id         String  @id @default(nanoid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Family {
  id            String         @id @default(nanoid())
  name          String
  description   String         @default("")
  recipes       Recipe[]
  familyMembers FamilyMember[]
  invitations   Invitation[]
}

enum AccessRole {
  USER
  ADMIN
  VIEWER
}

model FamilyMember {
  id         String     @id @default(nanoid())
  userId     String
  familyId   String
  accessRole AccessRole @default(USER)

  @@unique([userId, familyId])

  family     Family     @relation(fields: [familyId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  recipes    Recipe[]
}

model Invitation {
  id         String     @id @default(nanoid())
  email      String
  familyId   String
  family     Family     @relation(fields: [familyId], references: [id])
  accessRole AccessRole
  code       String     @default(nanoid())
  expiresAt  DateTime   @default(dbgenerated("NOW() + interval '7 day'"))
}

enum RecipeStatus {
  DRAFT
  PRIVATE
  PUBLIC
}

model Recipe {
  id                     String       @id @default(nanoid())
  name                   String
  description            String
  instructions           String
  preparationTimeMinutes Int
  cookingTimeMinutes     Int
  status                 RecipeStatus @default(DRAFT)
  familyId               String
  familyMemberId         String
  family                 Family       @relation(fields: [familyId], references: [id])
  tags                   Tag[]
  familyMember           FamilyMember @relation(fields: [familyMemberId], references: [id])
  ingredients            Ingredient[]
}

model Ingredient {
  id          String   @id @default(nanoid())
  name        String
  color       String   @default("#E2E8F0") // slate-200
  description String
  tags        Tag[]
  recipes     Recipe[]
  recipeId    String?
}

model Tag {
  id          String       @id @default(nanoid())
  name        String
  color       String
  description String
  recipes     Recipe[]
  ingredients Ingredient[]
}
